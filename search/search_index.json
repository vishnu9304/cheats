{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"MY CHEATS"},{"location":"crypto/network_security/","text":"Basic Concepts Encryption: Conversion of plain text to cipher text. (Sender) Decryption: Conversion of cipher text to plain text. (Receiver) Cryptography: Study of Encryption Cryptanalysis: Study of Decryption Cryptology: Encryption + Decryption Encryption can be done in two ways: Stream Cipher: Conversion takes place bit by bit. (Recommended for short length messages Block Cipher: Conversion takes place block by block (grouping of bits), block size is determined by the type of algorithm. Two type of Encryption mechanism: Symmetric Encryption: Same key will be used for Encryption process and Decryption process (Secret key). Asymmetric Encryption: Two keys will be used that are mathematically linked (Public and Private keys). Note: It is possible to encrypt data with private key and decrypt it with public key. Types of Attacks Passive attacks: No modification will be done to the data by unauthorized user. Active attacks: Data will modified by unauthorized user. Passive attacks types: Eavesdropping - No modification will be done to the data, the attacker will just listen to the messages. Traffic Analysis - Just Analysing the traffic. Based on the traffic flow access will be gained. Active attacks types: Masquerade attacks - Receiver will receive the data from 3rd party in the name of sender. Replay attacks - Alice (A) sends her hashed password to Bob (B). Eve (E) sniffs the hash and replays it pretending like alice. Data Modification attacks - Sender sends the data, the attacker takes it and modifies it send it to receiver. Denial Of Service attacks - Disrupts the services provided by the server. Security Services Authentication - Acess control. Prevent un-authorized access. Authorization - Verification of user identity. Confidentiality - Securely sharing the data. Integrity - Make sure the data is not modified during transmission. Non-Repudiation. Substitution Techniques - The characters are replaced with corresponding cipher texts which are calulated mathematically (Vulnerable to attacks, suitable only for short length methods). Example: Caesar cipher Transposition Techniques - Re-arrange the order of bit positions. Example: Rail fence Cipher Columnar transposition FEISTEL STRUCTURE Most of the block cipher techniques follows a strcture called as FEISTEL STRUCTURE. FEISTEL STRUCTURE - Surf online for more info. Block ciper design priciples: block size key size number of rounds subkeys Symmentric Algorithms DES (Data Encyption Standard) AES (Advanced Encyption Standard) ASymmentric Algorithms RSA Diffe Hellman Key Exchange. This is not an Encryption algorithm. It is used only to exchange the secret/symmetric keys.","title":"Network Security"},{"location":"crypto/network_security/#basic-concepts","text":"Encryption: Conversion of plain text to cipher text. (Sender) Decryption: Conversion of cipher text to plain text. (Receiver) Cryptography: Study of Encryption Cryptanalysis: Study of Decryption Cryptology: Encryption + Decryption","title":"Basic Concepts"},{"location":"crypto/network_security/#encryption-can-be-done-in-two-ways","text":"Stream Cipher: Conversion takes place bit by bit. (Recommended for short length messages Block Cipher: Conversion takes place block by block (grouping of bits), block size is determined by the type of algorithm.","title":"Encryption can be done in two ways:"},{"location":"crypto/network_security/#two-type-of-encryption-mechanism","text":"Symmetric Encryption: Same key will be used for Encryption process and Decryption process (Secret key). Asymmetric Encryption: Two keys will be used that are mathematically linked (Public and Private keys). Note: It is possible to encrypt data with private key and decrypt it with public key.","title":"Two type of Encryption mechanism:"},{"location":"crypto/network_security/#types-of-attacks","text":"Passive attacks: No modification will be done to the data by unauthorized user. Active attacks: Data will modified by unauthorized user. Passive attacks types: Eavesdropping - No modification will be done to the data, the attacker will just listen to the messages. Traffic Analysis - Just Analysing the traffic. Based on the traffic flow access will be gained. Active attacks types: Masquerade attacks - Receiver will receive the data from 3rd party in the name of sender. Replay attacks - Alice (A) sends her hashed password to Bob (B). Eve (E) sniffs the hash and replays it pretending like alice. Data Modification attacks - Sender sends the data, the attacker takes it and modifies it send it to receiver. Denial Of Service attacks - Disrupts the services provided by the server.","title":"Types of Attacks"},{"location":"crypto/network_security/#security-services","text":"Authentication - Acess control. Prevent un-authorized access. Authorization - Verification of user identity. Confidentiality - Securely sharing the data. Integrity - Make sure the data is not modified during transmission. Non-Repudiation. Substitution Techniques - The characters are replaced with corresponding cipher texts which are calulated mathematically (Vulnerable to attacks, suitable only for short length methods). Example: Caesar cipher Transposition Techniques - Re-arrange the order of bit positions. Example: Rail fence Cipher Columnar transposition","title":"Security Services"},{"location":"crypto/network_security/#feistel-structure","text":"Most of the block cipher techniques follows a strcture called as FEISTEL STRUCTURE. FEISTEL STRUCTURE - Surf online for more info. Block ciper design priciples: block size key size number of rounds subkeys","title":"FEISTEL STRUCTURE"},{"location":"crypto/network_security/#symmentric-algorithms","text":"DES (Data Encyption Standard) AES (Advanced Encyption Standard)","title":"Symmentric Algorithms"},{"location":"crypto/network_security/#asymmentric-algorithms","text":"RSA Diffe Hellman Key Exchange. This is not an Encryption algorithm. It is used only to exchange the secret/symmetric keys.","title":"ASymmentric Algorithms"},{"location":"crypto/ssl/","text":"Certificate extensions An SSL Certificate is essentially an X.509 certificate, it defines the structure of the certificate. These certificate files will have different extensions based on the format and encoding they use. Types of encoding Binary Base64 ASCII Formats PEM uses Base64 ASCII encoding DER uses Binary encoding PEM file extensions (pem, crt, key, cer) The .pem file can include the server certificate, the intermediate certificate and the private key in a single file The server certificate and intermediate certificate can also be in a separate .crt or .cer file The private key can be in a .key file Each certificate in the PEM file is contained between the ---- BEGIN CERTIFICATE---- and ----END CERTIFICATE---- statements The private key is contained between the ---- BEGIN RSA PRIVATE KEY----- and -----END RSA PRIVATE KEY----- statements The CSR is contained between the -----BEGIN CERTIFICATE REQUEST----- and -----END CERTIFICATE REQUEST----- statements DER file extensions (der, cer) The DER certificates are in binary form, contained in .der or .cer files. These certificates are mainly used in Java-based web servers. OpenSSL commands Print the certificate in text form and don't print certificate output. openssl x509 -in server.crt -text -noout Verify Whether a Certificate and Private Key Match Verify Whether a Certificate and Private Key Match.To verify you need to print out md5 checksums and compare them. openssl x509 -noout -modulus -in server.crt| openssl md5 openssl rsa -noout -modulus -in server.key| openssl md5 Verify key and it's validity sudo openssl rsa -in server.key -noout -check RSA key ok Verify a Certificate was Signed by a CA openssl verify -verbose -CAFile ca.crt server.crt Convert PEM to DER openssl x509 -in server.crt -outform der -out server.der Convert DER to PEM openssl x509 -inform der -in server.der -out server.crt","title":"SSL"},{"location":"crypto/ssl/#certificate-extensions","text":"An SSL Certificate is essentially an X.509 certificate, it defines the structure of the certificate. These certificate files will have different extensions based on the format and encoding they use.","title":"Certificate extensions"},{"location":"crypto/ssl/#types-of-encoding","text":"Binary Base64 ASCII","title":"Types of encoding"},{"location":"crypto/ssl/#formats","text":"PEM uses Base64 ASCII encoding DER uses Binary encoding","title":"Formats"},{"location":"crypto/ssl/#pem-file-extensions-pem-crt-key-cer","text":"The .pem file can include the server certificate, the intermediate certificate and the private key in a single file The server certificate and intermediate certificate can also be in a separate .crt or .cer file The private key can be in a .key file Each certificate in the PEM file is contained between the ---- BEGIN CERTIFICATE---- and ----END CERTIFICATE---- statements The private key is contained between the ---- BEGIN RSA PRIVATE KEY----- and -----END RSA PRIVATE KEY----- statements The CSR is contained between the -----BEGIN CERTIFICATE REQUEST----- and -----END CERTIFICATE REQUEST----- statements","title":"PEM file extensions (pem, crt, key, cer)"},{"location":"crypto/ssl/#der-file-extensions-der-cer","text":"The DER certificates are in binary form, contained in .der or .cer files. These certificates are mainly used in Java-based web servers.","title":"DER file extensions (der, cer)"},{"location":"crypto/ssl/#openssl-commands","text":"Print the certificate in text form and don't print certificate output. openssl x509 -in server.crt -text -noout","title":"OpenSSL commands"},{"location":"crypto/ssl/#verify-whether-a-certificate-and-private-key-match","text":"Verify Whether a Certificate and Private Key Match.To verify you need to print out md5 checksums and compare them. openssl x509 -noout -modulus -in server.crt| openssl md5 openssl rsa -noout -modulus -in server.key| openssl md5","title":"Verify Whether a Certificate and Private Key Match"},{"location":"crypto/ssl/#verify-key-and-its-validity","text":"sudo openssl rsa -in server.key -noout -check RSA key ok","title":"Verify key and it's validity"},{"location":"crypto/ssl/#verify-a-certificate-was-signed-by-a-ca","text":"openssl verify -verbose -CAFile ca.crt server.crt","title":"Verify a Certificate was Signed by a CA"},{"location":"crypto/ssl/#convert-pem-to-der","text":"openssl x509 -in server.crt -outform der -out server.der","title":"Convert PEM to DER"},{"location":"crypto/ssl/#convert-der-to-pem","text":"openssl x509 -inform der -in server.der -out server.crt","title":"Convert DER to PEM"},{"location":"docker/docker_ca/","text":"Docker Edition Community Edition - Free Opensource Enterprise Edition - Paid version Installing Docker CE 1 - sudo yum install -y device-mapper-persistent-data lvm2 2 - sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 3 - sudo yum install -y docker-ce-18.09.5 docker-ce-cli-18.09.5 containerd.io 4 - sudo systemctl start docker 5 - sudo systemctl enable docker 6 - sudo useradd -a -G docker username // For allowing normal users to execute docker commands, add them under docker group. Selcting Storage Driver Command to find the storage driver: docker info Changing the default storage driver: 1 - Change it under \"/usr/lib/systemd/system/docker.service\" and add this flag: --storage-driver devicemapper ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ExecStart=/usr/bin/dockerd -H fd:// --storage-driver devicemapper --containerd=/run/container containerd.sock 2 - Daemon config file. (Recommended Way) /etc/docker/daemon.json { \"storage-driver\": \"devicemapper\" } When you start a container, a thin writable container layer is added on top of the other layers. Any changes the container makes to the filesystem are stored here. The major difference between a container and an image is the top writable layer. When the container is deleted, the writable layer is also deleted. The underlying image remains unchanged. Container Size On Disk: docker ps -s // https://docs.docker.com/storage/storagedriver/ Copy On Write: Copy the files to the writable layer only if the files are modifed. Running the docker Container: (docker run command) Some of the common falgs used with \"docker run\" command. Syntax: docker run [options] image[:tag] [command] [args] -d Run container in detached mode. --name For providing a descriptive name to the container. --restart options no - Never restart the container. on-failure - If container exits with non-zero exit code. always - Always restart the container whether it is successful or not. Also start the container on daemon restart. unless-stopped - It is similar to \"always\", Container will not be restarted, if you stop it explicitly. -p host_port : container_port Publish, expose a port inside the container by mapping it with host port. --rm Remove the container automatically when it exits. Not compatible with \"--restart\" option. --memory Memory Hard Limit. --memory-reservation A soft limit on memory usage. Container will be restricted within this memory if docker detects memory contention on the host. Logging Drivers https://docs.docker.com/config/containers/logging/configure/ Logging Drivers are a pluggable framework for accessing log data from services and container in docker. Configure the default logging driver under /etc/docker/daemon.json using options \"log-driver\" and \"log-opts\" (System Wide) { \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"15m\" } } How to override the settings at the container level. docker run --log-driver json-file --log-opt max-size=50m nginx Image Creation, Management, and Registry Docker Images: The image consists of one or more read-only layers, while the container adds one additional layer. The layered filesystem allows multiple images and containers to share the same layers. This results in 1 - Small overall footprint 2 - Faster image transfer 3 - Faster image build docker image pull IMAGE[:TAG] To pull the docker image. docker image history IMAGE To list the layers used by the image. Components Of Dockerfile https://docs.docker.com/engine/reference/builder/ A docker file is set of instructions which are used to construct docker image. These instructions are called directives. FROM Starts with a new build stage and sets the base image. ENV To set environment variables. RUN Create new filesystem layer by running a command. CMD Default command to run when the container is executed. EXPOSE Technically it will not expose any ports. Documents which ports are intended to be published when running a container. WORKDIR Sets the current working directory for subsequent directives such as ADD,COPY,CMD,ENTRYPOINT We can have multiple WORKDIR directives inside the docker file. WORKDIR /var WORKDIR www //Relative path WORKDIR html The above three WORKDIR directives are equivalent to /var/www/html //Absolute path COPY Copy files from local machine to the image ADD Similar to copy, but little advanced than COPY, like pulling files using URL and extract an archive into loose files in the image. STOPSIGNAL Specify the signal that will be used to stop the container. When you run docker container stop, this signal will be passed. HEALTHCHECK Used to specify a custom health check, to verify the container is running fine. HEALTHCHECK CMD curl localhost:80 docker build -t custom-nginx . docker run -d custom-nginx -p 8080:80 Example: FROM Centos7:latest ENV NGINX_VERSION=1.0.8 RUN yum update -y yum install -y curl RUN yum update -y yum install -y nginx=$NGINX_VERSION [ why \"yum update -y\" is added twice? When you rebuild the image by changing nginx version, it will first look for the line \"RUN yum update -y yum install -y curl\" since there is not change in the RUN directive it will use the same old layer. Note: Inorder to trigger a change to any layer, we should modify the RUN directive. ] CMD [\"nginx\", \"-g\", \"daemon off;\"] Building Efficient Images General tips: - Put things that are less likely to change on lower level layers. - Don't create unnecessary layers. - Avoid including any unnecessary files, packages, etc.. Docker Multistage builds: Docker supports ablity to perform multistage builds.It will have more than one FROM directive in the docker file with each FROM directive starting a new stage. Each stage begins with a completely new set of layers, allowing you to selectively copy only the files needed from previous layer. Example: Below steps will create an image size of 774MB FROM golang:1.12.4 WORKDIR /helloworld COPY helloworld.go . RUN GOOS=linux go build -a -installsuffix cgo -o helloworld . CMD [\"./helloworld\"] Example: Multistate build.This will produce only image size of 7MB. Idea is to keep only the required files not all, in our case we don't need the entire to go image to run our program. All we need is a binary. Create the binay in STAGE1 and move it to STAGE2 image with smaller size. FROM golang:1.12.4 AS compiler //STAGE1 WORKDIR /helloworld COPY helloworld.go . RUN GOOS=linux go build -a -installsuffix cgo -o helloworld . FROM alpine:3.9.3 //STAGE2 WORKDIR /root COPY --from=compiler /helloworld/helloworld . CMD [\"./helloworld\"] REPOSITORY TAG IMAGE ID CREATED SIZE gostage latest 3b3816104992 7 seconds ago 7.53MB go-custom latest 9802cc0d3ab8 10 minutes ago 776MB Managing Images docker pull To pull the images from registry, if not found locally. docker image ls To list images. docker image ls -a To list images including intermediate images. docker inspect image name To get more info about the images. Provides json output. docker inspect --format \"{{.Arch}} {{.Os}}\" --format (go template) to extract specific fields. docker image rm image name / docker rmi image name To remove the image. docker container ls -a / docker ps -a To list the containers. Dangling Images: Dangling Images are something which doesn't have tags and no containers referencing them. When we delete a container, it doesn't necessarily delete the uderlying image. It will delete only the tags not the image. So that image is called danglig image. Cleaning up the Dangling Images: docker image prune If you have any image which is not referenced by anything or any containers. This command will do a clean up. Flattening an Image: Docker doesn't provide an official way to do this. Run a container - docker export (export the container to an archive) - docker import (Import the archive as new image) docker export container flat.tar cat flat.tar | docker import - flat:latest Docker Storage: https://docs.docker.com/storage/ Storage drivers are also known as Graph Drivers. The proper storage driver to use often depends on your operating system. overlay2 Centos8 and RHEL versions aufs Ubuntu device mapper Centos7 and earlier Storage Models: Persistent data can be managed using several storage models. Filesystem storage: Data stored in the form of a file system. Used by overlay and aufs. Efficient use of memory. Inefficient with write-heavy workloads. Block storage: Stores data in block. Used by device mapper. Efficient with write-heavy workloads. Object storage: Stores data in an external object based store. Application must be designed to use object based storage. Flexible and scalable.","title":"Docker CA"},{"location":"docker/docker_ca/#docker-edition","text":"Community Edition - Free Opensource Enterprise Edition - Paid version","title":"Docker Edition"},{"location":"docker/docker_ca/#installing-docker-ce","text":"1 - sudo yum install -y device-mapper-persistent-data lvm2 2 - sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 3 - sudo yum install -y docker-ce-18.09.5 docker-ce-cli-18.09.5 containerd.io 4 - sudo systemctl start docker 5 - sudo systemctl enable docker 6 - sudo useradd -a -G docker username // For allowing normal users to execute docker commands, add them under docker group.","title":"Installing Docker CE"},{"location":"docker/docker_ca/#selcting-storage-driver","text":"Command to find the storage driver: docker info Changing the default storage driver: 1 - Change it under \"/usr/lib/systemd/system/docker.service\" and add this flag: --storage-driver devicemapper ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ExecStart=/usr/bin/dockerd -H fd:// --storage-driver devicemapper --containerd=/run/container containerd.sock 2 - Daemon config file. (Recommended Way) /etc/docker/daemon.json { \"storage-driver\": \"devicemapper\" } When you start a container, a thin writable container layer is added on top of the other layers. Any changes the container makes to the filesystem are stored here. The major difference between a container and an image is the top writable layer. When the container is deleted, the writable layer is also deleted. The underlying image remains unchanged. Container Size On Disk: docker ps -s // https://docs.docker.com/storage/storagedriver/ Copy On Write: Copy the files to the writable layer only if the files are modifed.","title":"Selcting Storage Driver"},{"location":"docker/docker_ca/#running-the-docker-container-docker-run-command","text":"Some of the common falgs used with \"docker run\" command. Syntax: docker run [options] image[:tag] [command] [args] -d Run container in detached mode. --name For providing a descriptive name to the container. --restart options no - Never restart the container. on-failure - If container exits with non-zero exit code. always - Always restart the container whether it is successful or not. Also start the container on daemon restart. unless-stopped - It is similar to \"always\", Container will not be restarted, if you stop it explicitly. -p host_port : container_port Publish, expose a port inside the container by mapping it with host port. --rm Remove the container automatically when it exits. Not compatible with \"--restart\" option. --memory Memory Hard Limit. --memory-reservation A soft limit on memory usage. Container will be restricted within this memory if docker detects memory contention on the host.","title":"Running the docker Container: (docker run command)"},{"location":"docker/docker_ca/#logging-drivers","text":"https://docs.docker.com/config/containers/logging/configure/ Logging Drivers are a pluggable framework for accessing log data from services and container in docker. Configure the default logging driver under /etc/docker/daemon.json using options \"log-driver\" and \"log-opts\" (System Wide) { \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"15m\" } } How to override the settings at the container level. docker run --log-driver json-file --log-opt max-size=50m nginx","title":"Logging Drivers"},{"location":"docker/docker_ca/#image-creation-management-and-registry","text":"Docker Images: The image consists of one or more read-only layers, while the container adds one additional layer. The layered filesystem allows multiple images and containers to share the same layers. This results in 1 - Small overall footprint 2 - Faster image transfer 3 - Faster image build docker image pull IMAGE[:TAG] To pull the docker image. docker image history IMAGE To list the layers used by the image.","title":"Image Creation, Management, and Registry"},{"location":"docker/docker_ca/#components-of-dockerfile","text":"https://docs.docker.com/engine/reference/builder/ A docker file is set of instructions which are used to construct docker image. These instructions are called directives. FROM Starts with a new build stage and sets the base image. ENV To set environment variables. RUN Create new filesystem layer by running a command. CMD Default command to run when the container is executed. EXPOSE Technically it will not expose any ports. Documents which ports are intended to be published when running a container. WORKDIR Sets the current working directory for subsequent directives such as ADD,COPY,CMD,ENTRYPOINT We can have multiple WORKDIR directives inside the docker file. WORKDIR /var WORKDIR www //Relative path WORKDIR html The above three WORKDIR directives are equivalent to /var/www/html //Absolute path COPY Copy files from local machine to the image ADD Similar to copy, but little advanced than COPY, like pulling files using URL and extract an archive into loose files in the image. STOPSIGNAL Specify the signal that will be used to stop the container. When you run docker container stop, this signal will be passed. HEALTHCHECK Used to specify a custom health check, to verify the container is running fine. HEALTHCHECK CMD curl localhost:80 docker build -t custom-nginx . docker run -d custom-nginx -p 8080:80 Example: FROM Centos7:latest ENV NGINX_VERSION=1.0.8 RUN yum update -y yum install -y curl RUN yum update -y yum install -y nginx=$NGINX_VERSION [ why \"yum update -y\" is added twice? When you rebuild the image by changing nginx version, it will first look for the line \"RUN yum update -y yum install -y curl\" since there is not change in the RUN directive it will use the same old layer. Note: Inorder to trigger a change to any layer, we should modify the RUN directive. ] CMD [\"nginx\", \"-g\", \"daemon off;\"]","title":"Components Of Dockerfile"},{"location":"docker/docker_ca/#building-efficient-images","text":"General tips: - Put things that are less likely to change on lower level layers. - Don't create unnecessary layers. - Avoid including any unnecessary files, packages, etc.. Docker Multistage builds: Docker supports ablity to perform multistage builds.It will have more than one FROM directive in the docker file with each FROM directive starting a new stage. Each stage begins with a completely new set of layers, allowing you to selectively copy only the files needed from previous layer. Example: Below steps will create an image size of 774MB FROM golang:1.12.4 WORKDIR /helloworld COPY helloworld.go . RUN GOOS=linux go build -a -installsuffix cgo -o helloworld . CMD [\"./helloworld\"] Example: Multistate build.This will produce only image size of 7MB. Idea is to keep only the required files not all, in our case we don't need the entire to go image to run our program. All we need is a binary. Create the binay in STAGE1 and move it to STAGE2 image with smaller size. FROM golang:1.12.4 AS compiler //STAGE1 WORKDIR /helloworld COPY helloworld.go . RUN GOOS=linux go build -a -installsuffix cgo -o helloworld . FROM alpine:3.9.3 //STAGE2 WORKDIR /root COPY --from=compiler /helloworld/helloworld . CMD [\"./helloworld\"] REPOSITORY TAG IMAGE ID CREATED SIZE gostage latest 3b3816104992 7 seconds ago 7.53MB go-custom latest 9802cc0d3ab8 10 minutes ago 776MB","title":"Building Efficient Images"},{"location":"docker/docker_ca/#managing-images","text":"docker pull To pull the images from registry, if not found locally. docker image ls To list images. docker image ls -a To list images including intermediate images. docker inspect image name To get more info about the images. Provides json output. docker inspect --format \"{{.Arch}} {{.Os}}\" --format (go template) to extract specific fields. docker image rm image name / docker rmi image name To remove the image. docker container ls -a / docker ps -a To list the containers.","title":"Managing Images"},{"location":"docker/docker_ca/#dangling-images","text":"Dangling Images are something which doesn't have tags and no containers referencing them. When we delete a container, it doesn't necessarily delete the uderlying image. It will delete only the tags not the image. So that image is called danglig image.","title":"Dangling Images:"},{"location":"docker/docker_ca/#cleaning-up-the-dangling-images","text":"docker image prune If you have any image which is not referenced by anything or any containers. This command will do a clean up.","title":"Cleaning up the Dangling Images:"},{"location":"docker/docker_ca/#flattening-an-image-docker-doesnt-provide-an-official-way-to-do-this","text":"Run a container - docker export (export the container to an archive) - docker import (Import the archive as new image) docker export container flat.tar cat flat.tar | docker import - flat:latest","title":"Flattening an Image: Docker doesn't provide an official way to do this."},{"location":"docker/docker_ca/#docker-storage-httpsdocsdockercomstorage","text":"Storage drivers are also known as Graph Drivers. The proper storage driver to use often depends on your operating system. overlay2 Centos8 and RHEL versions aufs Ubuntu device mapper Centos7 and earlier Storage Models: Persistent data can be managed using several storage models.","title":"Docker Storage: https://docs.docker.com/storage/"},{"location":"docker/docker_ca/#filesystem-storage","text":"Data stored in the form of a file system. Used by overlay and aufs. Efficient use of memory. Inefficient with write-heavy workloads.","title":"Filesystem storage:"},{"location":"docker/docker_ca/#block-storage","text":"Stores data in block. Used by device mapper. Efficient with write-heavy workloads.","title":"Block storage:"},{"location":"docker/docker_ca/#object-storage","text":"Stores data in an external object based store. Application must be designed to use object based storage. Flexible and scalable.","title":"Object storage:"},{"location":"golang/gomod/","text":"What is a go module? A module is a way of packaging the software as simple as that. A go module is not atomic and it can contain many packages inside like a repository and it is versioned . Go follows something called Semantic Versioning to version the packages. Also called as semver. oh wait, then what is the difference between a package and a repository? A package cannot be sub divided in to working pieces. If you divide the package in to two different files, still you need those two files to represent the whole pacakge. A package is an atomic thing. A repository contains many packages that can move around independently. What is versioning? Why do we use it? How do we use it? Software changes over time. We need some kind of standard way of tracking these changes over period of time. That is where Semantic Versioning comes in to picture. It is a pre straight forward convention of how to name versions. Example: v1.0.0 v1 - Major Version for every single non backward compatible versions. v1.0 - Minor Version. We increase it when we add a new feature and not broken any backward Compatiblity. v1.0.0 - Patch updates. fixing things that has broken, like security bug fixes. Writing programs outside the GOPATH Command to check default gopath: go env GOPATH Example: package main import ( \"fmt\" \"log\" \"os\" \"github.com/sirupsen/logrus\" ) func main() { _, err := io.Copy(os.Stdout, os.Stdin) if err != { logrus.Fatal(err) } } Here github.com/sirupsen/logrus is a third party package. When you do go get it will complain that it is not able to find the gopath. It cannot store code outside gopath. Vishnus-Mac:mycat v01$ go get go get: no install location for directory /Users/v01/dev/mycat outside GOPATH For more details see: 'go help gopath' Go module comes to rescuse the above scenario. We are going to go from a directory having go code to directory having go module Vishnus-Mac:mycat v01$ go mod init go: cannot determine module path for source directory /Users/v01/dev/mycat (outside GOPATH, no import comments) Again it will complain as you are outside the gopath and it doesn't know what module you are initalizing. We need to provide the import path Vishnus-Mac:mycat v01$ go mod init github.com/vishnu9304/mycat go: creating new go.mod: module github.com/vishnu9304/mycat Vishnus-Mac:mycat v01$ cat go.mod module github.com/vishnu9304/mycat go 1.12 When you run go build it will pull all the dependencies and mentioned in our go code. Vishnus-Mac:mycat v01$ go build Vishnus-Mac:mycat v01$ ls go.mod go.sum main.go mycat Vishnus-Mac:mycat v01$ cat go.mod module github.com/vishnu9304/mycat go 1.12 require github.com/sirupsen/logrus v1.4.2 Vishnus-Mac:mycat v01$ cat go.sum github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38= github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ= github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4= github.com/sirupsen/logrus v1.4.2 h1:SPIRibHv4MatM3XXNO2BJeFLZwZ2LvZgfQ5+UNI2im4= github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE= github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME= github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs= golang.org/x/sys v0.0.0-20190422165155-953cdadca894 h1:Cz4ceDQGXuKRnVBDTS23GTn/pU5OE2C0WrNTOYK1Uuc= golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs= Under go.mod you can see a new line require github.com/sirupsen/logrus v1.4.2 . Our module depends on that module. You will see one more additional file go.sum which contains a lot of info. On top of the version we are using we also have a HASH J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38= It's a cryptographic hash to track if something that got changed over time. Commonly used commands Command to fetch a module with the latest tag: go get -u github.com/sirupsen/logrus Let's do some clean up: go mod tidy When you do a go ge t or go build your test files are ignored. go mod tidy will also find the modules that your tests are depending on. Where are these downloaded modules stores? It will be stored under GOPATH /go/pkg/mod How to identify why we are depending on some module? Vishnus-Mac:mycat v01$ go mod why github.com/pmezard/go-difflib # github.com/pmezard/go-difflib (main module does not need package github.com/pmezard/go-difflib) Actually we are not using github.com/pmezard/go-difflib directly. We are using some module inside it. To identify that we need to add -m flag. Find something that is in github.com/pmezard/go-difflib Vishnus-Mac:mycat v01$ go mod why -m github.com/pmezard/go-difflib # github.com/pmezard/go-difflib github.com/vishnu9304/mycat github.com/sirupsen/logrus github.com/sirupsen/logrus.test github.com/stretchr/testify/assert github.com/pmezard/go-difflib/difflib Migrating modules to use go mod. Step 1: Clone the repo. Step 2: go mod init Step 3: go mod tidy Step 4: go get ./...","title":"gomod"},{"location":"golang/gomod/#what-is-a-go-module","text":"A module is a way of packaging the software as simple as that. A go module is not atomic and it can contain many packages inside like a repository and it is versioned . Go follows something called Semantic Versioning to version the packages. Also called as semver.","title":"What is a go module?"},{"location":"golang/gomod/#oh-wait-then-what-is-the-difference-between-a-package-and-a-repository","text":"A package cannot be sub divided in to working pieces. If you divide the package in to two different files, still you need those two files to represent the whole pacakge. A package is an atomic thing. A repository contains many packages that can move around independently.","title":"oh wait, then what is the difference between a package and a repository?"},{"location":"golang/gomod/#what-is-versioning-why-do-we-use-it-how-do-we-use-it","text":"Software changes over time. We need some kind of standard way of tracking these changes over period of time. That is where Semantic Versioning comes in to picture. It is a pre straight forward convention of how to name versions.","title":"What is versioning? Why do we use it? How do we use it?"},{"location":"golang/gomod/#example","text":"v1.0.0 v1 - Major Version for every single non backward compatible versions. v1.0 - Minor Version. We increase it when we add a new feature and not broken any backward Compatiblity. v1.0.0 - Patch updates. fixing things that has broken, like security bug fixes.","title":"Example:"},{"location":"golang/gomod/#writing-programs-outside-the-gopath","text":"Command to check default gopath: go env GOPATH","title":"Writing programs outside the GOPATH"},{"location":"golang/gomod/#example_1","text":"package main import ( \"fmt\" \"log\" \"os\" \"github.com/sirupsen/logrus\" ) func main() { _, err := io.Copy(os.Stdout, os.Stdin) if err != { logrus.Fatal(err) } } Here github.com/sirupsen/logrus is a third party package. When you do go get it will complain that it is not able to find the gopath. It cannot store code outside gopath. Vishnus-Mac:mycat v01$ go get go get: no install location for directory /Users/v01/dev/mycat outside GOPATH For more details see: 'go help gopath' Go module comes to rescuse the above scenario. We are going to go from a directory having go code to directory having go module Vishnus-Mac:mycat v01$ go mod init go: cannot determine module path for source directory /Users/v01/dev/mycat (outside GOPATH, no import comments) Again it will complain as you are outside the gopath and it doesn't know what module you are initalizing. We need to provide the import path Vishnus-Mac:mycat v01$ go mod init github.com/vishnu9304/mycat go: creating new go.mod: module github.com/vishnu9304/mycat Vishnus-Mac:mycat v01$ cat go.mod module github.com/vishnu9304/mycat go 1.12 When you run go build it will pull all the dependencies and mentioned in our go code. Vishnus-Mac:mycat v01$ go build Vishnus-Mac:mycat v01$ ls go.mod go.sum main.go mycat Vishnus-Mac:mycat v01$ cat go.mod module github.com/vishnu9304/mycat go 1.12 require github.com/sirupsen/logrus v1.4.2 Vishnus-Mac:mycat v01$ cat go.sum github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38= github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ= github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4= github.com/sirupsen/logrus v1.4.2 h1:SPIRibHv4MatM3XXNO2BJeFLZwZ2LvZgfQ5+UNI2im4= github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE= github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME= github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs= golang.org/x/sys v0.0.0-20190422165155-953cdadca894 h1:Cz4ceDQGXuKRnVBDTS23GTn/pU5OE2C0WrNTOYK1Uuc= golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs= Under go.mod you can see a new line require github.com/sirupsen/logrus v1.4.2 . Our module depends on that module. You will see one more additional file go.sum which contains a lot of info. On top of the version we are using we also have a HASH J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38= It's a cryptographic hash to track if something that got changed over time.","title":"Example:"},{"location":"golang/gomod/#commonly-used-commands","text":"Command to fetch a module with the latest tag: go get -u github.com/sirupsen/logrus Let's do some clean up: go mod tidy When you do a go ge t or go build your test files are ignored. go mod tidy will also find the modules that your tests are depending on.","title":"Commonly used commands"},{"location":"golang/gomod/#where-are-these-downloaded-modules-stores","text":"It will be stored under GOPATH /go/pkg/mod","title":"Where are these downloaded modules stores?"},{"location":"golang/gomod/#how-to-identify-why-we-are-depending-on-some-module","text":"Vishnus-Mac:mycat v01$ go mod why github.com/pmezard/go-difflib # github.com/pmezard/go-difflib (main module does not need package github.com/pmezard/go-difflib) Actually we are not using github.com/pmezard/go-difflib directly. We are using some module inside it. To identify that we need to add -m flag. Find something that is in github.com/pmezard/go-difflib Vishnus-Mac:mycat v01$ go mod why -m github.com/pmezard/go-difflib # github.com/pmezard/go-difflib github.com/vishnu9304/mycat github.com/sirupsen/logrus github.com/sirupsen/logrus.test github.com/stretchr/testify/assert github.com/pmezard/go-difflib/difflib","title":"How to identify why we are depending on some module?"},{"location":"golang/gomod/#migrating-modules-to-use-go-mod","text":"Step 1: Clone the repo. Step 2: go mod init Step 3: go mod tidy Step 4: go get ./...","title":"Migrating modules to use go mod."},{"location":"networking/networking/","text":"OSI Model - Open Systems Interconnect Physical Layer - Twisted, Co-axial, Wireless, Copper cables etc. Datalink Layer - Ethernet Protocol (Wired/Wireless), docsis3 Protocol (ISP - Internet) - Data Over Cable Service Interface Specification. Datalink Layer is the place where data movement takes place from one device to an another device. Network Layer - IP Addressing and IP Routing. Allows end to end communication, where as Ethernet allows only device to device communications. Transport Layer - Transmission Control Protocol Universal Datagram Protocol. Builds session between client and the server. Application Layer - http, https, ssh etc. Application Layer Protocols Data Transfer Protocols - HTTP/HTTPS, protocol used to transfer hypertext documents. - FTP (20 Auth, 21 Data Transfer), SFTP (22), TFTP (69) tranferring files. TFTP for sending small files without authentication. Email Protocols - POP3 110/995, SMTP 25/465, IMAP 143/993 Authentication Protocols - LDAP 389, LDAPS 636 Network Service Protocols - DHCP, DNS 53, NTP Network Management Protocols- TELNET 23, SSH 22, SNMP Audio Visual Protocols - H.323 1720/1721 (Audio/Video comms), SIP 5060/5061 (Session Initiation Protocol) Layer 4 Layer 7 Layer 4 - Transport Layer Protocols and Uinversal Datagram Protocols. 3-way Handshake Step 1: SYN from client to server Step 2: ACK + SYN from server Step 3: ACK from client We user layer4 to establish the session and layer7 for actual data transfer. 4-way Disconnect Step 1: FIN from server Step 2: FIN + ACK from client Step 3: FIN from client Step 4: FIN + ACK from server We can quicky end the session with out following 4-way Disconnect sequence by using RST (RESET) message.","title":"NETWORKING"},{"location":"networking/networking/#osi-model-open-systems-interconnect","text":"Physical Layer - Twisted, Co-axial, Wireless, Copper cables etc. Datalink Layer - Ethernet Protocol (Wired/Wireless), docsis3 Protocol (ISP - Internet) - Data Over Cable Service Interface Specification. Datalink Layer is the place where data movement takes place from one device to an another device. Network Layer - IP Addressing and IP Routing. Allows end to end communication, where as Ethernet allows only device to device communications. Transport Layer - Transmission Control Protocol Universal Datagram Protocol. Builds session between client and the server. Application Layer - http, https, ssh etc.","title":"OSI Model - Open Systems Interconnect"},{"location":"networking/networking/#application-layer-protocols","text":"Data Transfer Protocols - HTTP/HTTPS, protocol used to transfer hypertext documents. - FTP (20 Auth, 21 Data Transfer), SFTP (22), TFTP (69) tranferring files. TFTP for sending small files without authentication. Email Protocols - POP3 110/995, SMTP 25/465, IMAP 143/993 Authentication Protocols - LDAP 389, LDAPS 636 Network Service Protocols - DHCP, DNS 53, NTP Network Management Protocols- TELNET 23, SSH 22, SNMP Audio Visual Protocols - H.323 1720/1721 (Audio/Video comms), SIP 5060/5061 (Session Initiation Protocol)","title":"Application Layer Protocols"},{"location":"networking/networking/#layer-4-layer-7","text":"Layer 4 - Transport Layer Protocols and Uinversal Datagram Protocols.","title":"Layer 4 &amp; Layer 7"},{"location":"networking/networking/#3-way-handshake","text":"Step 1: SYN from client to server Step 2: ACK + SYN from server Step 3: ACK from client We user layer4 to establish the session and layer7 for actual data transfer.","title":"3-way Handshake"},{"location":"networking/networking/#4-way-disconnect","text":"Step 1: FIN from server Step 2: FIN + ACK from client Step 3: FIN from client Step 4: FIN + ACK from server We can quicky end the session with out following 4-way Disconnect sequence by using RST (RESET) message.","title":"4-way Disconnect"},{"location":"web/http/","text":"Fragments and Queries in HTTP url: Example: https://www.yahoo.com/search?q=tesla%20research Query: search?q=tesla%20research Example: https://www.yahoo.com/search?q=tesla%20research#space%20research Query: #space research Which means under \"q=tesla%20research\" resource scroll to \"#space\" section. HTTP Request Methods: [GET] Retreive a resource [POST] Update a resource [PUT] Store a resource [DELETE] Remove a resource [HEAD Reterive the headers for a resource telnet yahoo.com 80 GET /yahoo.com/yahoomail.jpg HTTP/1.1 Host:yahoo.com Safe and Unsafe: Safe - let's you to read and view resources. Unsafe - let's you to modify the resources. Post/Redirect/Get Operation: To avoid duplicate post requests signup (GET signup) signup page with forms (POST and update the data and REDIRECT to signed page) signed http Request Format: [method] [url] [version] [GET] [http://server.com/articles/741.html] [HTTP/1.1] [headers] [HOST]: [yahoo.com] [headers] [Accept-Language]: [fr-FR] [headers] [Date]: [Fri, 10 Aug 2002 21:12:00 GMT] Common Request Header: Referrer The URL of the referring page. The page where the URL originated. User-Agent Information about the browser. Accept Preffered media types. Accept-Language Preferred language. Cookie Cookie information. If-Modified-Since Date of last retrieval. Used for caching. Date Creation timestamp for the message. http Response Format: [version] [status] [reason] [HTTP/1.1] [200] [ok] [headers] [Server]: [nginx] [headers] [Content-Type]: [text/html] [body] Status Codes: [100-199] Informational [200-299] Successful [300-309] Redirection [400-499] Client Error [500-599] Server Error [200] [OK] Success. [301] [Moved Permanently] Resource Moved, don't check here again. [302] [Moved Temporarily] Resource Moved, but check here again. (Post Redirect Get Mechanism) [304] [Not Modified] Resource hasn't changed since last retrieval. [400] [Bad Request] Bad Syntax. [401] [Unauthorized] Client might need to authenticate. [403] [Forbidden] Refused Access. [404] [Not found] Resource doesn't exist. [500] [Internal server error] Something went wrong during processing. [503] [Service unavailable] Server will not service the request. HTTP Connections How does the messages actualy moves in the network? When are the network connections opened? When are the network connections closed? http (Application Layer) - tcp (Transport Layer) http Layer (Browser): 1 - Extract the host name and port number from the URL \"http://mail.yahoo.com/q?s=^mail\". 2 - Creates an HTTP socket and start writing the data to the socket. TCP Transport Layer: 1 - Accepts the data and ensures the data is getting delivered to the server without getting lost or duplicated. Error detection / flow control and takes care of the data reliablity. IP Network Layer: 1 - Responsible for taking these information and moving them in the network switch/router/gateway etc. 2 - IP is responsible for delivering the data to destination but doesn't gaurentee the delivery (TCP's job). Datalink Layer: 1 - Ethernet frames. TCP Handshake: Before starting the actual transmission, there is a 3 steps process followed to make sure the server and the client are in agreement to transfer the data. [SYN] Seq=0 [SYN, ACK] Seq=0 Ack=1 [ACK] Seq=1 Ack=1 Persistent Connections: Default type of connection in HTTP/1.1 1 - Persistent connection stays open after completion of one request response transaction. 2 - There is always a downside, each server has a limit in number of persistent connections as a security measure. 3 - Attackes will perform DOS attacks by opening number of persistent connections and makes servers un-responsive. 4 - Since servers only accepts only finite number of persistent connections, servers are configured to close the connections after certain intervals (if idle). Note: The server which does not allow the persistent connection must include a http connection header called \"Connection: close\" which will not allow the client to make another request on the same request. It has to re-open a new connection. Parallel connections: Making 2 different connection parallely at the same time. The server will return \"Connection: close\" header. Persistent Connections: Making more than one req/res transaction in a single connection. Proxies: Forward and Reverse Proxy: Forward Proxy forwards the client requests to the internet. Example: Specific set of users (clients) can access twitter from company via the Forward server. Reverse Proxy: Reverse sits at the server end accepts the request from internet and forwards them to servers (example: load balancing). Cache Controls: With HTTP/1.1 clients and proxies generally cache the response with 200 ok response code. (response to the http get request) It will not cache PUT, POST and DELETE transaction. Note: Application server can influence this cache settings by using appropriate cache headers. \"Cache-Control: private, max-age=0\" Cache-Control: public Public proxy servers can cache the response. Cache-Control: private Response targeted to single user, only web browser. Cache-Control: no-cache Should not be cached. Cache-Control: no-store HTTP Security: The stateful and stateless web: HTTP is designed as a stateless protocol, each request/response transaction is independent of any previous or future transactions. cookie are used for tracking / differentiate one user from another user. Non-Persistent Cookies (Session Cookies): These cookies will be used only for particular session. Example: set-cookie: GUID=07hfhjebhbwb76, domain=.search.yahoo.com, // Send this cookie only to yahoo.com and not to other websites. path=/ // Restrict cookie to specific path. Persistent Cookies (Will have a validity and stored to client filesystem). set-cookie: GUID=07hfhjebhbwb76, domain=.search.yahoo.com, path=/, expires=Monday, 09-July-2019 21:20:00 GMT Authentication Types: Basic Type: 1. GET /account HTTP/1.1 Host: starlingbank.com ... 2. HTPP/1.1 401 Unauthorized WWW-Authenticate: Basic realm=\"starlingbank.com\" 3. GET /account HTTP/1.1 Host: starlingbank.com Authorization: Basic Z3fnjnjnsflr \"Authorization\" [header type] \"Basic\" [AUTH type] \"Z3fnjnjnsflr\" [base64 encoded value of username and password] Digest: uses md5 digets instead of base64 Form Authentication: When you try to access a secured resource, the user will be temporarily redirected to a web page with authentication form. If authentication is successful, the user will be redirected again to the secured resource. Open ID","title":"HTTP"},{"location":"web/http/#fragments-and-queries-in-http-url","text":"Example: https://www.yahoo.com/search?q=tesla%20research Query: search?q=tesla%20research Example: https://www.yahoo.com/search?q=tesla%20research#space%20research Query: #space research Which means under \"q=tesla%20research\" resource scroll to \"#space\" section.","title":"Fragments and Queries in HTTP url:"},{"location":"web/http/#http-request-methods","text":"[GET] Retreive a resource [POST] Update a resource [PUT] Store a resource [DELETE] Remove a resource [HEAD Reterive the headers for a resource telnet yahoo.com 80 GET /yahoo.com/yahoomail.jpg HTTP/1.1 Host:yahoo.com","title":"HTTP Request Methods:"},{"location":"web/http/#safe-and-unsafe","text":"Safe - let's you to read and view resources. Unsafe - let's you to modify the resources.","title":"Safe and Unsafe:"},{"location":"web/http/#postredirectget-operation-to-avoid-duplicate-post-requests","text":"signup (GET signup) signup page with forms (POST and update the data and REDIRECT to signed page) signed","title":"Post/Redirect/Get Operation: To avoid duplicate post requests"},{"location":"web/http/#http-request-format","text":"[method] [url] [version] [GET] [http://server.com/articles/741.html] [HTTP/1.1] [headers] [HOST]: [yahoo.com] [headers] [Accept-Language]: [fr-FR] [headers] [Date]: [Fri, 10 Aug 2002 21:12:00 GMT]","title":"http Request Format:"},{"location":"web/http/#common-request-header","text":"Referrer The URL of the referring page. The page where the URL originated. User-Agent Information about the browser. Accept Preffered media types. Accept-Language Preferred language. Cookie Cookie information. If-Modified-Since Date of last retrieval. Used for caching. Date Creation timestamp for the message.","title":"Common Request Header:"},{"location":"web/http/#http-response-format","text":"[version] [status] [reason] [HTTP/1.1] [200] [ok] [headers] [Server]: [nginx] [headers] [Content-Type]: [text/html] [body]","title":"http Response Format:"},{"location":"web/http/#status-codes","text":"[100-199] Informational [200-299] Successful [300-309] Redirection [400-499] Client Error [500-599] Server Error [200] [OK] Success. [301] [Moved Permanently] Resource Moved, don't check here again. [302] [Moved Temporarily] Resource Moved, but check here again. (Post Redirect Get Mechanism) [304] [Not Modified] Resource hasn't changed since last retrieval. [400] [Bad Request] Bad Syntax. [401] [Unauthorized] Client might need to authenticate. [403] [Forbidden] Refused Access. [404] [Not found] Resource doesn't exist. [500] [Internal server error] Something went wrong during processing. [503] [Service unavailable] Server will not service the request.","title":"Status Codes:"},{"location":"web/http/#http-connections","text":"How does the messages actualy moves in the network? When are the network connections opened? When are the network connections closed? http (Application Layer) - tcp (Transport Layer)","title":"HTTP Connections"},{"location":"web/http/#http-layer-browser","text":"1 - Extract the host name and port number from the URL \"http://mail.yahoo.com/q?s=^mail\". 2 - Creates an HTTP socket and start writing the data to the socket.","title":"http Layer (Browser):"},{"location":"web/http/#tcp-transport-layer","text":"1 - Accepts the data and ensures the data is getting delivered to the server without getting lost or duplicated. Error detection / flow control and takes care of the data reliablity.","title":"TCP Transport Layer:"},{"location":"web/http/#ip-network-layer","text":"1 - Responsible for taking these information and moving them in the network switch/router/gateway etc. 2 - IP is responsible for delivering the data to destination but doesn't gaurentee the delivery (TCP's job).","title":"IP Network Layer:"},{"location":"web/http/#datalink-layer","text":"1 - Ethernet frames.","title":"Datalink Layer:"},{"location":"web/http/#tcp-handshake","text":"Before starting the actual transmission, there is a 3 steps process followed to make sure the server and the client are in agreement to transfer the data. [SYN] Seq=0 [SYN, ACK] Seq=0 Ack=1 [ACK] Seq=1 Ack=1","title":"TCP Handshake:"},{"location":"web/http/#persistent-connections-default-type-of-connection-in-http11","text":"1 - Persistent connection stays open after completion of one request response transaction. 2 - There is always a downside, each server has a limit in number of persistent connections as a security measure. 3 - Attackes will perform DOS attacks by opening number of persistent connections and makes servers un-responsive. 4 - Since servers only accepts only finite number of persistent connections, servers are configured to close the connections after certain intervals (if idle). Note: The server which does not allow the persistent connection must include a http connection header called \"Connection: close\" which will not allow the client to make another request on the same request. It has to re-open a new connection. Parallel connections: Making 2 different connection parallely at the same time. The server will return \"Connection: close\" header. Persistent Connections: Making more than one req/res transaction in a single connection.","title":"Persistent Connections: Default type of connection in HTTP/1.1"},{"location":"web/http/#proxies","text":"Forward and Reverse Proxy: Forward Proxy forwards the client requests to the internet. Example: Specific set of users (clients) can access twitter from company via the Forward server.","title":"Proxies:"},{"location":"web/http/#reverse-proxy","text":"Reverse sits at the server end accepts the request from internet and forwards them to servers (example: load balancing).","title":"Reverse Proxy:"},{"location":"web/http/#cache-controls","text":"With HTTP/1.1 clients and proxies generally cache the response with 200 ok response code. (response to the http get request) It will not cache PUT, POST and DELETE transaction. Note: Application server can influence this cache settings by using appropriate cache headers. \"Cache-Control: private, max-age=0\" Cache-Control: public Public proxy servers can cache the response. Cache-Control: private Response targeted to single user, only web browser. Cache-Control: no-cache Should not be cached. Cache-Control: no-store","title":"Cache Controls:"},{"location":"web/http/#http-security","text":"The stateful and stateless web: HTTP is designed as a stateless protocol, each request/response transaction is independent of any previous or future transactions. cookie are used for tracking / differentiate one user from another user. Non-Persistent Cookies (Session Cookies): These cookies will be used only for particular session. Example: set-cookie: GUID=07hfhjebhbwb76, domain=.search.yahoo.com, // Send this cookie only to yahoo.com and not to other websites. path=/ // Restrict cookie to specific path. Persistent Cookies (Will have a validity and stored to client filesystem). set-cookie: GUID=07hfhjebhbwb76, domain=.search.yahoo.com, path=/, expires=Monday, 09-July-2019 21:20:00 GMT","title":"HTTP Security:"},{"location":"web/http/#authentication-types","text":"Basic Type: 1. GET /account HTTP/1.1 Host: starlingbank.com ... 2. HTPP/1.1 401 Unauthorized WWW-Authenticate: Basic realm=\"starlingbank.com\" 3. GET /account HTTP/1.1 Host: starlingbank.com Authorization: Basic Z3fnjnjnsflr \"Authorization\" [header type] \"Basic\" [AUTH type] \"Z3fnjnjnsflr\" [base64 encoded value of username and password] Digest: uses md5 digets instead of base64","title":"Authentication Types:"},{"location":"web/http/#form-authentication","text":"When you try to access a secured resource, the user will be temporarily redirected to a web page with authentication form. If authentication is successful, the user will be redirected again to the secured resource. Open ID","title":"Form Authentication:"},{"location":"web/nginx/","text":"Notes: The basic nginx architecture consists of a master process and its workers. Developed to solve c10k problems. Which means handling 10,000 concurrent connections. Applications: High Performance Web Server Reverse Proxy (SSL Termination and Contnet Caching and Termination) Load Balancer The master is supposed to read the configuration file and maintain worker processes, while workers do the actual processing of requests. References: To get info about core context and directive blocks, go to http://nginx.org/en/docs/ngx_core_module.html Commands: While your nginx instance is running, you can manage it by sending signals: sudo nginx -s signal stop: fast shutdown quit: graceful shutdown (wait for workers to finish their processes) reload: reload the configuration file reopen: reopen the log files To verify configuration: nginx -t To view selinux context: semanage fcontext -l | grep -i /usr/share/nginx/html To add selinux context: semanage fcontext -a -t httpd_sys_content_t '/var/www' To restore context back to default: restorecon -R -v '/var/www' Curl with host header: curl --header \"Host: www.example.com\" localhost Configuration files location: /etc/nginx/nginx.conf /usr/local/etc/nginx/nginx.conf /usr/local/nginx/conf/nginx.conf Directive and Context: Directive: The option that consists of name and parameters; it should end with a semicolon Example: gzip on; Context: Section where you can declare directives (similar to scope in programming languages) Example: http { # http context gzip on; # directive in http context } Directive types: You have to pay attention when using the same directive in multiple contexts, as the inheritance model differs for different directives. There are 3 types of directives, each with its own inheritance model. Normal: Has one value per context. Also, it can be defined only once in the context. Subcontexts can override the parent directive, but this override will be valid only in a given subcontext. gzip on; gzip off; # illegal to have 2 normal directives in same context server { # server context location /downloads { # location subcontext under server context } location /assets { } } Array: Adding multiple directives in the same context will add to the values instead of overwriting them altogether. Defining a directive in a subcontext will override ALL parent values in the given subcontext. error_log /var/log/nginx/error.log; error_log /var/log/nginx/error_native.log notice; error_log /var/log/nginx/error_debug.log debug; server { location /downloads { # this will override all the parent directives error_log /var/log/nginx/error_downloads.log; } } Action: Actions are directives that change things. Their inheritance behaviour will depend on the module. For example, in the case of the rewrite directive, every matching directive will be executed: server { rewrite ^ /foobar; location /foobar { rewrite ^ /foo; rewrite ^ /bar; } } Custom Error Pages: Syntax: error_page list of error codes error page Example: error_page 404 /404.html Basic Auth: https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html location /admin.html { auth_basic \"Login Required\"; auth_basic_user_file /etc/nginx/.htpasswd; } nginx SSL: https://nginx.org/en/docs/http/ngx_http_ssl_module.html Self Singed Certs: mkdir /etc/nginx/ssl openssl -req x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/keys/private.key -out /etc/nginx/ssl/public.pem req - We\u2019re making a certificate request to OpenSSL -x509 - Specifying the structure that our certificate should have. Conforms to the X.509 standard -nodes - Do not encrypt the output key -days 365 - Set the key to be valid for 365 days -newkey rsa:2048 - Generate an RSA key that is 2048 bits in size -keyout /etc/nginx/ssl/private.key - File to write the private key to -out /etc/nginx/ssl/public.pem - Output file for public portion of key server { listen 443 ssl; root /usr/share/nginx/html; ssl_certificate /etc/nginx/ssl/home.v01.openhouse.cert.pem; ssl_certificate_key /etc/nginx/ssl/keys/home.v01.openhouse.key.pem; server_name _; location = /admin.html { auth_basic \"Login Required\"; auth_basic_user_file /etc/nginx/.htpasswd; } error_page 404 /404.html; }","title":"Nginx"},{"location":"web/nginx/#notes","text":"The basic nginx architecture consists of a master process and its workers. Developed to solve c10k problems. Which means handling 10,000 concurrent connections.","title":"Notes:"},{"location":"web/nginx/#applications","text":"High Performance Web Server Reverse Proxy (SSL Termination and Contnet Caching and Termination) Load Balancer The master is supposed to read the configuration file and maintain worker processes, while workers do the actual processing of requests.","title":"Applications:"},{"location":"web/nginx/#references","text":"To get info about core context and directive blocks, go to http://nginx.org/en/docs/ngx_core_module.html","title":"References:"},{"location":"web/nginx/#commands","text":"While your nginx instance is running, you can manage it by sending signals: sudo nginx -s signal stop: fast shutdown quit: graceful shutdown (wait for workers to finish their processes) reload: reload the configuration file reopen: reopen the log files To verify configuration: nginx -t To view selinux context: semanage fcontext -l | grep -i /usr/share/nginx/html To add selinux context: semanage fcontext -a -t httpd_sys_content_t '/var/www' To restore context back to default: restorecon -R -v '/var/www' Curl with host header: curl --header \"Host: www.example.com\" localhost","title":"Commands:"},{"location":"web/nginx/#configuration-files-location","text":"/etc/nginx/nginx.conf /usr/local/etc/nginx/nginx.conf /usr/local/nginx/conf/nginx.conf","title":"Configuration files location:"},{"location":"web/nginx/#directive-and-context","text":"Directive: The option that consists of name and parameters; it should end with a semicolon Example: gzip on; Context: Section where you can declare directives (similar to scope in programming languages) Example: http { # http context gzip on; # directive in http context }","title":"Directive and Context:"},{"location":"web/nginx/#directive-types","text":"You have to pay attention when using the same directive in multiple contexts, as the inheritance model differs for different directives. There are 3 types of directives, each with its own inheritance model.","title":"Directive types:"},{"location":"web/nginx/#normal","text":"Has one value per context. Also, it can be defined only once in the context. Subcontexts can override the parent directive, but this override will be valid only in a given subcontext. gzip on; gzip off; # illegal to have 2 normal directives in same context server { # server context location /downloads { # location subcontext under server context } location /assets { } }","title":"Normal:"},{"location":"web/nginx/#array","text":"Adding multiple directives in the same context will add to the values instead of overwriting them altogether. Defining a directive in a subcontext will override ALL parent values in the given subcontext. error_log /var/log/nginx/error.log; error_log /var/log/nginx/error_native.log notice; error_log /var/log/nginx/error_debug.log debug; server { location /downloads { # this will override all the parent directives error_log /var/log/nginx/error_downloads.log; } }","title":"Array:"},{"location":"web/nginx/#action","text":"Actions are directives that change things. Their inheritance behaviour will depend on the module. For example, in the case of the rewrite directive, every matching directive will be executed: server { rewrite ^ /foobar; location /foobar { rewrite ^ /foo; rewrite ^ /bar; } }","title":"Action:"},{"location":"web/nginx/#custom-error-pages","text":"Syntax: error_page list of error codes error page Example: error_page 404 /404.html","title":"Custom Error Pages:"},{"location":"web/nginx/#basic-auth","text":"https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html location /admin.html { auth_basic \"Login Required\"; auth_basic_user_file /etc/nginx/.htpasswd; } nginx SSL: https://nginx.org/en/docs/http/ngx_http_ssl_module.html","title":"Basic Auth:"},{"location":"web/nginx/#self-singed-certs","text":"mkdir /etc/nginx/ssl openssl -req x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/keys/private.key -out /etc/nginx/ssl/public.pem req - We\u2019re making a certificate request to OpenSSL -x509 - Specifying the structure that our certificate should have. Conforms to the X.509 standard -nodes - Do not encrypt the output key -days 365 - Set the key to be valid for 365 days -newkey rsa:2048 - Generate an RSA key that is 2048 bits in size -keyout /etc/nginx/ssl/private.key - File to write the private key to -out /etc/nginx/ssl/public.pem - Output file for public portion of key server { listen 443 ssl; root /usr/share/nginx/html; ssl_certificate /etc/nginx/ssl/home.v01.openhouse.cert.pem; ssl_certificate_key /etc/nginx/ssl/keys/home.v01.openhouse.key.pem; server_name _; location = /admin.html { auth_basic \"Login Required\"; auth_basic_user_file /etc/nginx/.htpasswd; } error_page 404 /404.html; }","title":"Self Singed Certs:"}]}